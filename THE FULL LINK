data:text/html;base64,PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KPGhlYWQ+CiAgPG1ldGEgY2hhcnNldD0iVVRGLTgiIC8+CiAgPHRpdGxlPkJsb2IgYW5kIGRhdGEgdXJscyBhbmQgb3BlbiBmaWxlPC90aXRsZT4KICA8c3R5bGU+CiAgI2RhdGFVUkxEaXNwbGF5IHsKICAgICAgbWFyZ2luOiAyMHB4OwogICAgICB3aGl0ZS1zcGFjZTogcHJlLXdyYXA7CiAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7CiAgICAgIHBhZGRpbmc6IDEwcHg7CiAgICAgIGJhY2tncm91bmQ6ICNmOGY4Zjg7CiAgICB9CiAgICAjYmxvYlVSTERpc3BsYXkgewogICAgICBtYXJnaW46IDIwcHg7CiAgICAgIHdoaXRlLXNwYWNlOiBwcmUtd3JhcDsKICAgICAgYm9yZGVyOiAxcHggc29saWQgI2NjYzsKICAgICAgcGFkZGluZzogMTBweDsKICAgICAgYmFja2dyb3VuZDogI2Y4ZjhmODsKICAgIH0KICAgICNvcGVuRmlsZUJ0biB7CiAgICAgIG1hcmdpbi1sZWZ0OiAxMHB4OwogICAgfQovKkJFTE9XIElTIE5PVCBNWSBXT1JLIGl0IHdhcyBtYWRlIGJ5IGh0bWwgYmVzdCBjb2RlcyAtIGh0bWxiZXN0Y29kZXMuY29tIC0gdGhlIGluZmluaXRlIHNxdWFyZXMgYmFja2dyb3VuZCovCiAgICBAaW1wb3J0IHVybChodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9RXhvOjEwMCk7CgpALXdlYmtpdC1rZXlmcmFtZXMgYmctc2Nyb2xsaW5nLXJldmVyc2UgewoxMDAlIHsKYmFja2dyb3VuZC1wb3NpdGlvbjogNTBweCA1MHB4Owp9Cn0KCkAtbW96LWtleWZyYW1lcyBiZy1zY3JvbGxpbmctcmV2ZXJzZSB7CjEwMCUgewpiYWNrZ3JvdW5kLXBvc2l0aW9uOiA1MHB4IDUwcHg7Cn0KfQoKQC1vLWtleWZyYW1lcyBiZy1zY3JvbGxpbmctcmV2ZXJzZSB7CjEwMCUgewpiYWNrZ3JvdW5kLXBvc2l0aW9uOiA1MHB4IDUwcHg7Cn0KfQoKQGtleWZyYW1lcyBiZy1zY3JvbGxpbmctcmV2ZXJzZSB7CjEwMCUgewpiYWNrZ3JvdW5kLXBvc2l0aW9uOiA1MHB4IDUwcHg7Cn0KfQoKQC13ZWJraXQta2V5ZnJhbWVzIGJnLXNjcm9sbGluZyB7CjAlIHsKYmFja2dyb3VuZC1wb3NpdGlvbjogNTBweCA1MHB4Owp9Cn0KCkAtbW96LWtleWZyYW1lcyBiZy1zY3JvbGxpbmcgewowJSB7CmJhY2tncm91bmQtcG9zaXRpb246IDUwcHggNTBweDsKfQp9CgpALW8ta2V5ZnJhbWVzIGJnLXNjcm9sbGluZyB7CjAlIHsKYmFja2dyb3VuZC1wb3NpdGlvbjogNTBweCA1MHB4Owp9Cn0KCkBrZXlmcmFtZXMgYmctc2Nyb2xsaW5nIHsKMCUgewpiYWNrZ3JvdW5kLXBvc2l0aW9uOiA1MHB4IDUwcHg7Cn0KfQovKiBNYWluIHN0eWxlcyAqLwpib2R5IHsKY29sb3I6ICM5OTk7CmZvbnQ6IDQwMCAxNnB4LzEuNSBleG8sIHVidW50dSwgInNlZ29lIHVpIiwgaGVsdmV0aWNhLCBhcmlhbCwgc2Fucy1zZXJpZjsKLyogaW1nIHNpemUgaXMgNTB4NTAgKi8KYmFja2dyb3VuZDogdXJsKCJkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQURJQUFBQXlDQUlBQUFDUlhSL21BQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBQUlHTklVazBBQUhvbEFBQ0Fnd0FBK2Y4QUFJRHBBQUIxTUFBQTZtQUFBRHFZQUFBWGI1SmZ4VVlBQUFCblNVUkJWSGphN001UkRZQXdERVhSRGdtdkVvY25sclFTMlN3VUZTVDl1RWZCR1dzOWM5N25iR3REY3F1cWlLaE9JbUxzL1VwdXpWeldFaTFhdEdqUm9rV0xGaTFhdEdqUm9rV0xGaTFhdEdqUm9rV0xGaTFhZjdVa3o4eFdwOHo4QUFBQS8vOERBSjRMb0VBQWxMMW5BQUFBQUVsRlRrU3VRbUNDIikgcmVwZWF0IDAgMDsKLXdlYmtpdC1hbmltYXRpb246IGJnLXNjcm9sbGluZy1yZXZlcnNlIDAuOTJzIGluZmluaXRlOwovKiBTYWZhcmkgNCsgKi8KLW1vei1hbmltYXRpb246IGJnLXNjcm9sbGluZy1yZXZlcnNlIDAuOTJzIGluZmluaXRlOwovKiBGeCA1KyAqLwotby1hbmltYXRpb246IGJnLXNjcm9sbGluZy1yZXZlcnNlIDAuOTJzIGluZmluaXRlOwovKiBPcGVyYSAxMisgKi8KYW5pbWF0aW9uOiBiZy1zY3JvbGxpbmctcmV2ZXJzZSAwLjkycyBpbmZpbml0ZTsKLyogSUUgMTArICovCi13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogbGluZWFyOwotbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGxpbmVhcjsKLW8tYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogbGluZWFyOwphbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBsaW5lYXI7Cn0KLyogb2sgZW5kIG9mIGluZmluaXRlIGN1YmVzLCBodG1sYmVzdGNvZGVzLmNvbSBjcmVkaXQgKi8KICA8L3N0eWxlPgo8L2hlYWQ+Cjxib2R5PgogIDxsYWJlbCBzdHlsZT0iY29sb3I6Z3JheTsiIGZvcj0iZmlsZUlucHV0Ij5DaG9vc2UgYSBmaWxlOjwvbGFiZWw+CiAgPGlucHV0IHN0eWxlPSJjb2xvcjpncmF5OyIgaWQ9ImZpbGVJbnB1dCIgdHlwZT0iZmlsZSIgLz4KICA8YnV0dG9uIG9uY2xpY2s9ImRpc3BsYXlCbG9iVVJMKCkiPkdlbmVyYXRlICYgU2hvdyBVUkw8L2J1dHRvbj4KICA8YnV0dG9uIG9uY2xpY2s9ImdlbmVyYXRlRGF0YVVSTCgpIj5HZW5lcmF0ZSAmIFNob3cgRGF0YSBVUkw8L2J1dHRvbj4KICA8YnV0dG9uIGlkPSJvcGVuRmlsZUJ0biIgb25jbGljaz0ib3BlbkZpbGVJbk5ld1RhYigpIj5PcGVuIEZpbGU8L2J1dHRvbj4KICAgICAgPGEgdGFyZ2V0PSdfYmxhbmsnIGhyZWY9J2h0dHBzOi8vd3d3Lmh0bWxiZXN0Y29kZXMuY29tL0luZmluaXRlX01vdmluZ19TcXVhcmVzX2Zvcl9IVE1MX1BhZ2VfQmFja2dyb3VuZC5odG0nIHN0eWxlPSdmb250LXNpemU6IDhwdDsgdGV4dC1kZWNvcmF0aW9uOiBub25lJz5IdG1sIEJlc3QgQ29kZXMgbWFkZSB0aGlzIGNvb2wgYmFja2dyb3VuZCE8L2E+CiAgPGRpdiBpZD0iYmxvYlVSTERpc3BsYXkiIGNsYXNzPSJkaXNwbGF5Ij4KICA8c2NyaXB0PgogICAgbGV0IGN1cnJlbnRGaWxlQ29udGVudCA9ICcnOwoKICAgIGZ1bmN0aW9uIGRpc3BsYXlCbG9iVVJMKCkgewogICAgICBjb25zdCBmaWxlSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmlsZUlucHV0Jyk7CiAgICAgIGlmIChmaWxlSW5wdXQuZmlsZXMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgYWxlcnQoJ1BsZWFzZSBzZWxlY3QgYSBmaWxlIGZpcnN0LicpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICAKICAgICAgaWYgKCFmaWxlSW5wdXQuZmlsZXNbMF0pIHsKICAgICAgICBhbGVydCgnTm8gZmlsZSBzZWxlY3RlZC4nKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgCiAgICAgIGNvbnN0IGZpbGUgPSBmaWxlSW5wdXQuZmlsZXNbMF07CiAgICAgIGNvbnN0IGJsb2JVUkwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGUpOwogICAgICAKICAgICAgLy8gRGlzcGxheSB0aGUgQmxvYiBVUkwKICAgICAgY29uc3QgZGlzcGxheSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdibG9iVVJMRGlzcGxheScpOwogICAgICBkaXNwbGF5LnRleHRDb250ZW50ID0gYCR7YmxvYlVSTH1gOwogICAgICAKICAgICAgLy8gRm9yIHJldm9raW5nLCBzdG9yZSB0aGUgVVJMIGZvciBsYXRlciBpZiBuZWVkZWQKICAgICAgLy8gQnV0IGZvciB0aGlzIHVzZSwga2VlcCBpdCBzaW1wbGUKICAgICAgCiAgICAgIGNvbnNvbGUubG9nKCdHZW5lcmF0ZWQgQmxvYiBVUkw6JywgYmxvYlVSTCk7CiAgICB9CgogICAgLy8gTG9hZCB0aGUgZmlsZSBjb250ZW50IGludG8gbWVtb3J5IHRvIG9wZW4gaXQgbGF0ZXIKICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmaWxlSW5wdXQnKS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZXZlbnQpID0+IHsKICAgICAgY29uc3QgZmlsZSA9IGV2ZW50LnRhcmdldC5maWxlc1swXTsKICAgICAgaWYgKCFmaWxlKSB7CiAgICAgICAgYWxlcnQoJ1lvdSBoYXZlIG5vdCBzZWxlY3RlZCBhIGZpbGUuJyk7CiAgICAgICAgY3VycmVudEZpbGVDb250ZW50ID0gJyc7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpOwogICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24oZSkgewogICAgICAgIGN1cnJlbnRGaWxlQ29udGVudCA9IGUudGFyZ2V0LnJlc3VsdDsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc1RleHQoZmlsZSk7CiAgICB9KTsKCiAgICBmdW5jdGlvbiBvcGVuRmlsZUluTmV3VGFiKCkgewogICAgICBjb25zdCBmaWxlSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmlsZUlucHV0Jyk7CiAgICAgIGlmIChmaWxlSW5wdXQuZmlsZXMubGVuZ3RoID09PSAwIHx8ICFjdXJyZW50RmlsZUNvbnRlbnQpIHsKICAgICAgICBhbGVydCgnUGxlYXNlIHNlbGVjdCBhIGZpbGUgYW5kIHdhaXQgZm9yIGl0IHRvIGxvYWQuJyk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICAvLyBPcGVuIGEgbmV3IGJsYW5rIHBhZ2UKICAgICAgY29uc3QgbmV3VGFiID0gd2luZG93Lm9wZW4oJ2Fib3V0OmJsYW5rJyk7CgogICAgICAvLyBXcml0ZSB0aGUgZmlsZSBjb250ZW50IGludG8gdGhlIG5ldyB0YWIKICAgICAgaWYgKG5ld1RhYikgewogICAgICAgIG5ld1RhYi5kb2N1bWVudC5vcGVuKCk7CiAgICAgICAgbmV3VGFiLmRvY3VtZW50LndyaXRlKGN1cnJlbnRGaWxlQ29udGVudCk7CiAgICAgICAgbmV3VGFiLmRvY3VtZW50LmNsb3NlKCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgYWxlcnQoJ1BvcHVwIGJsb2NrZWQhIFBsZWFzZSBhbGxvdyBwb3B1cHMgZm9yIHRoaXMgc2l0ZS4nKTsKICAgICAgfQogICAgfQogIDwvc2NyaXB0PgogIDxzY3JpcHQ+CmZ1bmN0aW9uIGdlbmVyYXRlRGF0YVVSTCgpIHsKICAgICAgY29uc3QgZmlsZUlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZpbGVJbnB1dCcpOwogICAgICBpZiAoZmlsZUlucHV0LmZpbGVzLmxlbmd0aCA9PT0gMCkgewogICAgICAgIGFsZXJ0KCdQbGVhc2Ugc2VsZWN0IGEgZmlsZSBmaXJzdC4nKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGNvbnN0IGZpbGUgPSBmaWxlSW5wdXQuZmlsZXNbMF07CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CgogICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24oZSkgewogICAgICAgIGNvbnN0IGRhdGFVUkwgPSBlLnRhcmdldC5yZXN1bHQ7CgogICAgICAgIC8vIERpc3BsYXkgdGhlIERhdGEgVVJMCiAgICAgICAgY29uc3QgZGlzcGxheSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdibG9iVVJMRGlzcGxheScpOwogICAgICAgIGRpc3BsYXkudGV4dENvbnRlbnQgPSBkYXRhVVJMOwogICAgICB9OwoKICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7CiAgICB9CiAgPC9zY3JpcHQ+CjwvYm9keT4KPC9odG1sPg==
